% Problem 65. Word Counting and Indexing
% Created by Cody Team 
% You are given a list of strings, each being a list of words divided by 
% spaces. Break the strings into words, then return a master word table of 
% all the words and an indexed version of each string.
% 
% The master list should have no repeated entries and should be sorted in 
% alphabetical order.
% 
% Example
% 
% If str_list = {'one two three','two one four zero'}
% 
% then
% 
% word_table = {'four','one','three','two','zero'}
% str_index_list = {[2 4 3],[4 2 1 5]}.
% 
% Notice that no words are repeated in word_table, and each string in the 
% string_list can be regenerated by referencing into the word_table using 
% the string_index_list.

function [word_table,str_index_list] = word_index(sl)

word_table1 = regexp(strtrim(sprintf('%s ' ,sl{:})),' ', 'split');
word_table = unique(word_table1);

Y = [];
for i = 1:length(word_table1)
    Y = [Y; strfind(word_table, word_table1{i})];
end

X = regexp(sl,' ','split');

Z = [];
for i = 1:size(X,2)
    Z = [Z length(X{i})];
end
        
[a, b] = find(~cellfun(@isempty, Y));
C = sortrows([a b], 1);
str_index_list = mat2cell(C(:,2)', [1], [Z]);

end
